{
  "swagger": "2.0", 
  "info": {
    "title": "OANDA v20 Trade API", 
    "description": "Definitions and endpoints used to view, modify and close OANDA v20 Trades within an Account.", 
    "contact": {
      "name": "OANDA API Support", 
      "url": "http://developer.oanda.com/rest-live-v20/introduction/", 
      "email": "api@oanda.com"
    }, 
    "license": {
      "name": "MIT", 
      "url": "https://github.com/oanda/v20-openapi/blob/master/LICENSE.txt"
    }, 
    "version": "3.0.13"
  }, 
  "basePath": "/v3", 
  "produces": [
    "application/json"
  ], 
  "consumes": [
    "application/json"
  ], 
  "paths": {
    "/accounts/{accountID}/trades": {
      "get": {
        "summary": "List Trades", 
        "description": "Get a list of Trades for an Account", 
        "operationId": "list", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }, 
          {
            "name": "ids", 
            "despcription": "List of Trade IDs to retrieve.", 
            "in": "query", 
            "type": "array", 
            "items": {
              "type": "string", 
              "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
            }, 
            "collectionFormat": "csv"
          }, 
          {
            "name": "state", 
            "despcription": "The state to filter the requested Trades by.", 
            "in": "query", 
            "type": "string"
          }, 
          {
            "name": "instrument", 
            "despcription": "The instrument to filter the requested Trades by.", 
            "in": "query", 
            "type": "string", 
            "format": "A string containing the base currency and quote currency delimited by a \"_\"."
          }, 
          {
            "name": "count", 
            "despcription": "The maximum number of Trades to return.", 
            "in": "query", 
            "type": "integer"
          }, 
          {
            "name": "beforeID", 
            "despcription": "The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned.", 
            "in": "query", 
            "type": "string", 
            "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
          }
        ], 
        "responses": {
          "200": {
            "description": "The list of Trades requested", 
            "headers": {
              "Link": {
                "description": "A link to the next page of Trades if the results were paginated", 
                "type": "string"
              }
            }, 
            "schema": {
              "type": "object", 
              "properties": {
                "trades": {
                  "type": "array", 
                  "description": "The list of Trade detail objects", 
                  "items": {
                    "$ref": "#/definitions/Trade"
                  }
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "$ref": "v20_primitives.json#/responses/404"
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }, 
    "/accounts/{accountID}/openTrades": {
      "get": {
        "summary": "List Open Trades", 
        "description": "Get the list of open Trades for an Account", 
        "operationId": "listOpen", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }
        ], 
        "responses": {
          "200": {
            "description": "The Account's list of open Trades is provided", 
            "schema": {
              "type": "object", 
              "properties": {
                "trades": {
                  "type": "array", 
                  "description": "The Account's list of open Trades", 
                  "items": {
                    "$ref": "#/definitions/Trade"
                  }
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "$ref": "v20_primitives.json#/responses/404"
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }, 
    "/accounts/{accountID}/trades/{tradeSpecifier}": {
      "get": {
        "summary": "Trade Details", 
        "description": "Get the details of a specific Trade in an Account", 
        "operationId": "get", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }, 
          {
            "$ref": "#/parameters/tradeSpecifierPathParam"
          }
        ], 
        "responses": {
          "200": {
            "description": "The details for the requested Trade is provided", 
            "schema": {
              "type": "object", 
              "properties": {
                "trade": {
                  "$ref": "#/definitions/Trade", 
                  "description": "The Account's list of open Trades"
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "$ref": "v20_primitives.json#/responses/404"
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }, 
    "/accounts/{accountID}/trades/{tradeSpecifier}/close": {
      "put": {
        "summary": "Close Trade", 
        "description": "Close (partially or fully) a specific open Trade in an Account", 
        "operationId": "close", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }, 
          {
            "$ref": "#/parameters/tradeSpecifierPathParam"
          }, 
          {
            "name": "closeTradeBody", 
            "despcription": "Details of how much of the open Trade to close.", 
            "in": "body", 
            "schema": {
              "type": "object", 
              "properties": {
                "units": {
                  "type": "string", 
                  "description": "Indication of how much of the Trade to close. Either the string \"ALL\" (indicating that all of the Trade should be closed), or a DecimalNumber representing the number of units of the open Trade to Close using a TradeClose MarketOrder. The units specified must always be positive, and the magnitude of the value cannot exceed the magnitude of the Trade's open units."
                }
              }
            }, 
            "required": true
          }
        ], 
        "responses": {
          "200": {
            "description": "The Trade has been closed as requested", 
            "schema": {
              "type": "object", 
              "properties": {
                "orderCreateTransaction": {
                  "$ref": "v20_transaction.json#/definitions/MarketOrderTransaction", 
                  "description": "The MarketOrder Transaction created to close the Trade."
                }, 
                "orderFillTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderFillTransaction", 
                  "description": "The OrderFill Transaction that fills the Trade-closing MarketOrder and closes the Trade."
                }, 
                "orderCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The OrderCancel Transaction that immediately cancelled the Trade-closing MarketOrder."
                }, 
                "relatedTransactionIDs": {
                  "type": "array", 
                  "description": "The IDs of all Transactions that were created while satisfying the request.", 
                  "items": {
                    "$ref": "v20_transaction.json#/definitions/TransactionID"
                  }
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "400": {
            "description": "The Trade cannot be closed as requested.", 
            "schema": {
              "type": "object", 
              "properties": {
                "orderRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/MarketOrderRejectTransaction", 
                  "description": "The MarketOrderReject Transaction that rejects the creation of the Trade-closing MarketOrder."
                }, 
                "errorCode": {
                  "type": "string", 
                  "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
                  "required": false
                }, 
                "errorMessage": {
                  "type": "string", 
                  "description": "The human-readable description of the error that has occurred.", 
                  "required": true
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "description": "The Account or Trade does not exist", 
            "schema": {
              "type": "object", 
              "properties": {
                "orderRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/MarketOrderRejectTransaction", 
                  "description": "The MarketOrderReject Transaction that rejects the creation of the Trade-closing MarketOrder."
                }, 
                "errorCode": {
                  "type": "string", 
                  "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
                  "required": false
                }, 
                "errorMessage": {
                  "type": "string", 
                  "description": "The human-readable description of the error that has occurred.", 
                  "required": true
                }
              }
            }
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }, 
    "/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions": {
      "put": {
        "summary": "Set Trade Client Extensions", 
        "description": "Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.", 
        "operationId": "setClientExtensions", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }, 
          {
            "$ref": "#/parameters/tradeSpecifierPathParam"
          }, 
          {
            "name": "setTradeClientExtensionsBody", 
            "despcription": "Details of how to modify the Trade's Client Extensions.", 
            "in": "body", 
            "schema": {
              "type": "object", 
              "properties": {
                "clientExtensions": {
                  "$ref": "v20_transaction.json#/definitions/ClientExtensions", 
                  "description": "The Client Extensions to update the Trade with. Do not add, update, or delete the Client Extensions if your account is associated with MT4."
                }
              }
            }, 
            "required": true
          }
        ], 
        "responses": {
          "200": {
            "description": "The Trade's Client Extensions have been updated as requested.", 
            "schema": {
              "type": "object", 
              "properties": {
                "tradeClientExtensionsModifyTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TradeClientExtensionsModifyTransaction", 
                  "description": "The Transaction that updates the Trade's Client Extensions."
                }, 
                "relatedTransactionIDs": {
                  "type": "array", 
                  "description": "The IDs of all Transactions that were created while satisfying the request.", 
                  "items": {
                    "$ref": "v20_transaction.json#/definitions/TransactionID"
                  }
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "400": {
            "description": "The Trade's Client Extensions cannot be modified as requested.", 
            "schema": {
              "type": "object", 
              "properties": {
                "tradeClientExtensionsModifyRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TradeClientExtensionsModifyRejectTransaction", 
                  "description": "The Transaction that rejects the modification of the Trade's Client Extensions."
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account.", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }, 
                "errorCode": {
                  "type": "string", 
                  "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
                  "required": false
                }, 
                "errorMessage": {
                  "type": "string", 
                  "description": "The human-readable description of the error that has occurred.", 
                  "required": true
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "$ref": "v20_primitives.json#/responses/404"
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }, 
    "/accounts/{accountID}/trades/{tradeSpecifier}/orders": {
      "put": {
        "summary": "Set Dependent Orders", 
        "description": "Create, replace and cancel a Trade's dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself", 
        "operationId": "setDependentOrders", 
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          }, 
          {
            "$ref": "v20_account.json#/parameters/accountIDPathParam"
          }, 
          {
            "$ref": "#/parameters/tradeSpecifierPathParam"
          }, 
          {
            "name": "setTradeDependentOrdersBody", 
            "despcription": "Details of how to modify the Trade's dependent Orders.", 
            "in": "body", 
            "schema": {
              "type": "object", 
              "properties": {
                "takeProfit": {
                  "$ref": "v20_transaction.json#/definitions/TakeProfitDetails", 
                  "description": "The specification of the Take Profit to create/modify/cancel. If takeProfit is set to null, the Take Profit Order will be cancelled if it exists. If takeProfit is not provided, the exisiting Take Profit Order will not be modified. If a sub-field of takeProfit is not specified, that field will be set to a default value on create, and be inherited by the replacing order on modify."
                }, 
                "stopLoss": {
                  "$ref": "v20_transaction.json#/definitions/StopLossDetails", 
                  "description": "The specification of the Stop Loss to create/modify/cancel. If stopLoss is set to null, the Stop Loss Order will be cancelled if it exists. If stopLoss is not provided, the exisiting Stop Loss Order will not be modified. If a sub-field of stopLoss is not specified, that field will be set to a default value on create, and be inherited by the replacing order on modify."
                }, 
                "trailingStopLoss": {
                  "$ref": "v20_transaction.json#/definitions/TrailingStopLossDetails", 
                  "description": "The specification of the Trailing Stop Loss to create/modify/cancel. If trailingStopLoss is set to null, the Trailing Stop Loss Order will be cancelled if it exists. If trailingStopLoss is not provided, the exisiting Trailing Stop Loss Order will not be modified. If a sub-field of trailngStopLoss is not specified, that field will be set to a default value on create, and be inherited by the replacing order on modify."
                }
              }
            }, 
            "required": true
          }
        ], 
        "responses": {
          "200": {
            "description": "The Trade's dependent Orders have been modified as requested.", 
            "schema": {
              "type": "object", 
              "properties": {
                "takeProfitOrderCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The Transaction created that cancels the Trade's existing Take Profit Order."
                }, 
                "takeProfitOrderTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TakeProfitOrderTransaction", 
                  "description": "The Transaction created that creates a new Take Profit Order for the Trade."
                }, 
                "takeProfitOrderFillTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderFillTransaction", 
                  "description": "The Transaction created that immediately fills the Trade's new Take Profit Order. Only provided if the new Take Profit Order was immediately filled."
                }, 
                "takeProfitOrderCreatedCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The Transaction created that immediately cancels the Trade's new Take Profit Order. Only provided if the new Take Profit Order was immediately cancelled."
                }, 
                "stopLossOrderCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The Transaction created that cancels the Trade's existing Stop Loss Order."
                }, 
                "stopLossOrderTransaction": {
                  "$ref": "v20_transaction.json#/definitions/StopLossOrderTransaction", 
                  "description": "The Transaction created that creates a new Stop Loss Order for the Trade."
                }, 
                "stopLossOrderFillTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderFillTransaction", 
                  "description": "The Transaction created that immediately fills the Trade's new Stop Order. Only provided if the new Stop Loss Order was immediately filled."
                }, 
                "stopLossOrderCreatedCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The Transaction created that immediately cancels the Trade's new Stop Loss Order. Only provided if the new Stop Loss Order was immediately cancelled."
                }, 
                "trailingStopLossOrderCancelTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelTransaction", 
                  "description": "The Transaction created that cancels the Trade's existing Trailing Stop Loss Order."
                }, 
                "trailingStopLossOrderTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TrailingStopLossOrderTransaction", 
                  "description": "The Transaction created that creates a new Trailing Stop Loss Order for the Trade."
                }, 
                "relatedTransactionIDs": {
                  "type": "array", 
                  "description": "The IDs of all Transactions that were created while satisfying the request.", 
                  "items": {
                    "$ref": "v20_transaction.json#/definitions/TransactionID"
                  }
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }
              }
            }
          }, 
          "400": {
            "description": "The Trade's dependent Orders cannot be modified as requested.", 
            "schema": {
              "type": "object", 
              "properties": {
                "takeProfitOrderCancelRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelRejectTransaction", 
                  "description": "An OrderCancelRejectTransaction represents the rejection of the cancellation of an Order in the client's Account."
                }, 
                "takeProfitOrderRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TakeProfitOrderRejectTransaction", 
                  "description": "A TakeProfitOrderRejectTransaction represents the rejection of the creation of a TakeProfit Order."
                }, 
                "stopLossOrderCancelRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelRejectTransaction", 
                  "description": "An OrderCancelRejectTransaction represents the rejection of the cancellation of an Order in the client's Account."
                }, 
                "stopLossOrderRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/StopLossOrderRejectTransaction", 
                  "description": "A StopLossOrderRejectTransaction represents the rejection of the creation of a StopLoss Order."
                }, 
                "trailingStopLossOrderCancelRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/OrderCancelRejectTransaction", 
                  "description": "An OrderCancelRejectTransaction represents the rejection of the cancellation of an Order in the client's Account."
                }, 
                "trailingStopLossOrderRejectTransaction": {
                  "$ref": "v20_transaction.json#/definitions/TrailingStopLossOrderRejectTransaction", 
                  "description": "A TrailingStopLossOrderRejectTransaction represents the rejection of the creation of a TrailingStopLoss Order."
                }, 
                "lastTransactionID": {
                  "type": "string", 
                  "description": "The ID of the most recent Transaction created for the Account.", 
                  "example": "1523", 
                  "format": "String representation of the numerical OANDA-assigned TransactionID"
                }, 
                "errorCode": {
                  "type": "string", 
                  "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
                  "required": false
                }, 
                "errorMessage": {
                  "type": "string", 
                  "description": "The human-readable description of the error that has occurred.", 
                  "required": true
                }
              }
            }
          }, 
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          }, 
          "404": {
            "$ref": "v20_primitives.json#/responses/404"
          }, 
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }
  }, 
  "definitions": {
    "TradeID": {
      "type": "string", 
      "description": "The Trade's identifier, unique within the Trade's Account.", 
      "example": "1523", 
      "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
    }, 
    "TradeState": {
      "type": "string", 
      "description": "The current state of the Trade.", 
      "enum": [
        "OPEN", 
        "CLOSED", 
        "CLOSE_WHEN_TRADEABLE"
      ]
    }, 
    "TradeSpecifier": {
      "type": "string", 
      "description": "The identification of a Trade as referred to by clients", 
      "example": "@my_trade_id", 
      "format": "Either the Trade's OANDA-assigned TradeID or the Trade's client-provided ClientID prefixed by the \"@\" symbol"
    }, 
    "Trade": {
      "type": "object", 
      "description": "The specification of a Trade within an Account. This includes the full representation of the Trade's dependent Orders in addition to the IDs of those Orders.", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The Trade's identifier, unique within the Trade's Account.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
        }, 
        "instrument": {
          "type": "string", 
          "description": "The Trade's Instrument.", 
          "format": "A string containing the base currency and quote currency delimited by a \"_\"."
        }, 
        "price": {
          "type": "string", 
          "description": "The execution price of the Trade.", 
          "format": "A decimal number encodes as a string. The amount of precision provided depends on the Price's Instrument."
        }, 
        "openTime": {
          "type": "string", 
          "description": "The date/time when the Trade was opened.", 
          "format": "A string conforming to RFC 3339 (https://tools.ietf.org/rfc/rfc3339.txt). The amount of sub-second precision provided may represent milliseconds (000 to 999), microseconds (000000 to 999999) or nanoseconds (000000000 to 999999999)."
        }, 
        "state": {
          "type": "string", 
          "description": "The current state of the Trade.", 
          "enum": [
            "OPEN", 
            "CLOSED", 
            "CLOSE_WHEN_TRADEABLE"
          ]
        }, 
        "initialUnits": {
          "type": "string", 
          "description": "The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on what the number represents."
        }, 
        "currentUnits": {
          "type": "string", 
          "description": "The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on what the number represents."
        }, 
        "realizedPL": {
          "type": "string", 
          "description": "The total profit/loss realized on the closed portion of the Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "unrealizedPL": {
          "type": "string", 
          "description": "The unrealized profit/loss on the open portion of the Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "closingTransactionIDs": {
          "type": "array", 
          "description": "The IDs of the Transactions that have closed portions of this Trade.", 
          "items": {
            "$ref": "v20_transaction.json#/definitions/TransactionID"
          }
        }, 
        "financing": {
          "type": "string", 
          "description": "The financing paid/collected for this Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "closeTime": {
          "type": "string", 
          "description": "The date/time when the Trade was fully closed. Only provided for Trades whose state is CLOSED.", 
          "format": "A string conforming to RFC 3339 (https://tools.ietf.org/rfc/rfc3339.txt). The amount of sub-second precision provided may represent milliseconds (000 to 999), microseconds (000000 to 999999) or nanoseconds (000000000 to 999999999)."
        }, 
        "clientExtensions": {
          "$ref": "v20_transaction.json#/definitions/ClientExtensions", 
          "description": "The client extensions of the Trade."
        }, 
        "takeProfitOrder": {
          "$ref": "v20_order.json#/definitions/TakeProfitOrder", 
          "description": "Full representation of the Trade's Take Profit Order, only provided if such an Order exists."
        }, 
        "stopLossOrder": {
          "$ref": "v20_order.json#/definitions/StopLossOrder", 
          "description": "Full representation of the Trade's Stop Loss Order, only provided if such an Order exists."
        }, 
        "trailingStopLossOrder": {
          "$ref": "v20_order.json#/definitions/TrailingStopLossOrder", 
          "description": "Full representation of the Trade's Trailing Stop Loss Order, only provided if such an Order exists."
        }
      }
    }, 
    "TradeSummary": {
      "type": "object", 
      "description": "The summary of a Trade within an Account. This representation does not provide the full details of the Trade's dependent Orders.", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The Trade's identifier, unique within the Trade's Account.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
        }, 
        "instrument": {
          "type": "string", 
          "description": "The Trade's Instrument.", 
          "format": "A string containing the base currency and quote currency delimited by a \"_\"."
        }, 
        "price": {
          "type": "string", 
          "description": "The execution price of the Trade.", 
          "format": "A decimal number encodes as a string. The amount of precision provided depends on the Price's Instrument."
        }, 
        "openTime": {
          "type": "string", 
          "description": "The date/time when the Trade was opened.", 
          "format": "A string conforming to RFC 3339 (https://tools.ietf.org/rfc/rfc3339.txt). The amount of sub-second precision provided may represent milliseconds (000 to 999), microseconds (000000 to 999999) or nanoseconds (000000000 to 999999999)."
        }, 
        "state": {
          "type": "string", 
          "description": "The current state of the Trade.", 
          "enum": [
            "OPEN", 
            "CLOSED", 
            "CLOSE_WHEN_TRADEABLE"
          ]
        }, 
        "initialUnits": {
          "type": "string", 
          "description": "The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on what the number represents."
        }, 
        "currentUnits": {
          "type": "string", 
          "description": "The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on what the number represents."
        }, 
        "realizedPL": {
          "type": "string", 
          "description": "The total profit/loss realized on the closed portion of the Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "unrealizedPL": {
          "type": "string", 
          "description": "The unrealized profit/loss on the open portion of the Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "closingTransactionIDs": {
          "type": "array", 
          "description": "The IDs of the Transactions that have closed portions of this Trade.", 
          "items": {
            "$ref": "v20_transaction.json#/definitions/TransactionID"
          }
        }, 
        "financing": {
          "type": "string", 
          "description": "The financing paid/collected for this Trade.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }, 
        "closeTime": {
          "type": "string", 
          "description": "The date/time when the Trade was fully closed. Only provided for Trades whose state is CLOSED.", 
          "format": "A string conforming to RFC 3339 (https://tools.ietf.org/rfc/rfc3339.txt). The amount of sub-second precision provided may represent milliseconds (000 to 999), microseconds (000000 to 999999) or nanoseconds (000000000 to 999999999)."
        }, 
        "clientExtensions": {
          "$ref": "v20_transaction.json#/definitions/ClientExtensions", 
          "description": "The client extensions of the Trade."
        }, 
        "takeProfitOrderID": {
          "type": "string", 
          "description": "ID of the Trade's Take Profit Order, only provided if such an Order exists.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned OrderID. OANDA-assigned OrderIDs are positive integers, and are derived from the TransactionID of the Transaction that created the Order."
        }, 
        "stopLossOrderID": {
          "type": "string", 
          "description": "ID of the Trade's Stop Loss Order, only provided if such an Order exists.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned OrderID. OANDA-assigned OrderIDs are positive integers, and are derived from the TransactionID of the Transaction that created the Order."
        }, 
        "trailingStopLossOrderID": {
          "type": "string", 
          "description": "ID of the Trade's Trailing Stop Loss Order, only provided if such an Order exists.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned OrderID. OANDA-assigned OrderIDs are positive integers, and are derived from the TransactionID of the Transaction that created the Order."
        }
      }
    }, 
    "CalculatedTradeState": {
      "type": "object", 
      "description": "The dynamic (calculated) state of an open Trade", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The Trade's ID.", 
          "example": "1523", 
          "format": "The string representation of the OANDA-assigned TradeID. OANDA-assigned TradeIDs are positive integers, and are derived from the TransactionID of the Transaction that opened the Trade."
        }, 
        "unrealizedPL": {
          "type": "string", 
          "description": "The Trade's unrealized profit/loss.", 
          "format": "A decimal number encoded as a string. The amount of precision provided depends on the Account's home currency."
        }
      }
    }
  }, 
  "parameters": {
    "tradeSpecifierPathParam": {
      "name": "tradeSpecifier", 
      "despcription": "Specifier for the Trade", 
      "in": "path", 
      "type": "string", 
      "format": "Either the Trade's OANDA-assigned TradeID or the Trade's client-provided ClientID prefixed by the \"@\" symbol", 
      "required": true
    }
  }, 
  "responses": {
    "400": {
      "description": "Bad Request. The client has provided invalid data to be processed by the server.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }, 
    "401": {
      "description": "Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }, 
    "403": {
      "description": "Forbidden. The client has provided a token that does not authorize them to perform the action implemented by teh API endpoint.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }, 
    "404": {
      "description": "Not Found. The client has attempted to access an entity that does not exist.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }, 
    "405": {
      "description": "Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }, 
    "416": {
      "description": "Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.", 
      "schema": {
        "type": "object", 
        "properties": {
          "errorCode": {
            "type": "string", 
            "description": "The code of the error that has occurred. This field may not be returned for some errors.", 
            "required": false
          }, 
          "errorMessage": {
            "type": "string", 
            "description": "The human-readable description of the error that has occurred.", 
            "required": true
          }
        }
      }
    }
  }
}
